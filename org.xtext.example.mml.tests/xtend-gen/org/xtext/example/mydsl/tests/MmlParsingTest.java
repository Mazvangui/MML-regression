/**
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl.tests;

import com.google.common.io.Files;
import com.google.inject.Inject;
import java.io.BufferedReader;
import java.io.File;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.List;
import java.util.Map;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.xtext.example.mydsl.mml.DataInput;
import org.xtext.example.mydsl.mml.FrameworkLang;
import org.xtext.example.mydsl.mml.MLAlgorithm;
import org.xtext.example.mydsl.mml.MLChoiceAlgorithm;
import org.xtext.example.mydsl.mml.MMLModel;
import org.xtext.example.mydsl.mml.StratificationMethod;
import org.xtext.example.mydsl.mml.Validation;
import org.xtext.example.mydsl.mml.ValidationMetric;
import org.xtext.example.mydsl.mml.impl.AlgorithmVisitorImpl;
import org.xtext.example.mydsl.tests.MmlInjectorProvider;

@ExtendWith(InjectionExtension.class)
@InjectWith(MmlInjectorProvider.class)
@SuppressWarnings("all")
public class MmlParsingTest {
  @Inject
  private ParseHelper<MMLModel> parseHelper;
  
  @Test
  public void loadModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("datainput \"boston.csv\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("mlframework scikit-learn");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("algorithm DT");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("TrainingTest { ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("percentageTraining 70");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("mean_absolute_error");
      _builder.newLine();
      final MMLModel result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      Assertions.assertEquals("foo.csv", result.getInput().getFilelocation());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void compileDataInput() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("datainput \"boston.csv\" separator ;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("mlframework scikit-learn");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("algorithm DT");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("TrainingTest { ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("percentageTraining 70");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("mean_absolute_error");
      _builder.newLine();
      final MMLModel result = this.parseHelper.parse(_builder);
      final DataInput dataInput = result.getInput();
      final String fileLocation = dataInput.getFilelocation();
      final MLChoiceAlgorithm mlChoiceAlgorithm = result.getAlgorithm();
      final FrameworkLang frameworklang = mlChoiceAlgorithm.getFramework();
      final MLAlgorithm mlAlgorithm = mlChoiceAlgorithm.getAlgorithm();
      AlgorithmVisitorImpl _algorithmVisitorImpl = new AlgorithmVisitorImpl("DT");
      final Map<String, List<String>> map = mlAlgorithm.accept(_algorithmVisitorImpl);
      final Validation validation = result.getValidation();
      final StratificationMethod stratification = validation.getStratification();
      final List<ValidationMetric> metrics = validation.getMetric();
      int _number = stratification.getNumber();
      final double percentageTraining = (((double) _number) / 100.0);
      final double percentageTest = (1.0 - percentageTraining);
      final String validationMetric = metrics.get(0).getLiteral().toString();
      final String trainning = "train_test_split";
      String pythonImport = "import pandas as pd\n";
      List<String> _get = map.get("inputs");
      for (final String input : _get) {
        String _pythonImport = pythonImport;
        pythonImport = (_pythonImport + (input + "\n"));
      }
      String _pythonImport_1 = pythonImport;
      pythonImport = (_pythonImport_1 + (("from sklearn.model_selection import " + trainning) + "\n"));
      String _pythonImport_2 = pythonImport;
      pythonImport = (_pythonImport_2 + (("from sklearn.metrics import " + validationMetric) + "\n"));
      final String csvReading = (("\nmml_data = pd.read_csv(\"" + fileLocation) + "\")");
      String pandasCode = (pythonImport + csvReading);
      final String column = "column = mml_data.columns[-1]";
      String _pandasCode = pandasCode;
      pandasCode = (_pandasCode + (("\n" + column) + " \nX = mml_data.drop(columns=[column]) \n"));
      String _pandasCode_1 = pandasCode;
      pandasCode = (_pandasCode_1 + "\ny = mml_data[column] \n");
      String _pandasCode_2 = pandasCode;
      pandasCode = (_pandasCode_2 + (("\ntest_size = " + Double.valueOf(percentageTest)) + " \n"));
      String _pandasCode_3 = pandasCode;
      pandasCode = (_pandasCode_3 + "\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size) \n");
      String _pandasCode_4 = pandasCode;
      String _get_1 = map.get("body").get(0);
      String _plus = ("\nclf = " + _get_1);
      String _plus_1 = (_plus + " \n");
      pandasCode = (_pandasCode_4 + _plus_1);
      String _pandasCode_5 = pandasCode;
      pandasCode = (_pandasCode_5 + "\nclf.fit(X_train, y_train) \n");
      String _pandasCode_6 = pandasCode;
      pandasCode = (_pandasCode_6 + (("\naccuracy = " + validationMetric) + "(y_test, clf.predict(X_test)) \n"));
      String _pandasCode_7 = pandasCode;
      pandasCode = (_pandasCode_7 + "\nprint(accuracy)");
      byte[] _bytes = pandasCode.getBytes();
      File _file = new File("mml.py");
      Files.write(_bytes, _file);
      final Process p = Runtime.getRuntime().exec("python mml.py");
      InputStream _inputStream = p.getInputStream();
      InputStreamReader _inputStreamReader = new InputStreamReader(_inputStream);
      final BufferedReader in = new BufferedReader(_inputStreamReader);
      String line = null;
      while (((line = in.readLine()) != null)) {
        System.out.println(line);
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
